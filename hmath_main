import parser
import math
import random

from math import sin
from math import cos
from math import tan

def ev(n, x):
    code = parser.expr(n).compile()
    return eval(code)

def ev2(n,x,y):
    code = parser.expr(n).compile()
    return eval(code)

def intergrate(n,a,b):
    x = a
    total = 0
    dx = .0001
    while(x < b):
        total += (ev(n,x) + ev(n,x + dx)) * (dx / 2)
        x += dx
    return total

def differentiate(n,a):
    dx = .000001
    dy = ev(n, a + dx) - ev(n,a)
    return dy/dx
    
def summa(n, a, b):
    total = 0
    while(a <= b):
        total += ev(n,a)
        a += 1

    return total

def prime(n):
    prime = True
    a = 3
    if n % 2 == 0:
        prime = False
    while (a < n):
        if (n % a == 0):
            prime = False
            break
        a += 2

    return prime

def palindrome(n):
    x = list(str(n))
    a = 0
    b = len(x) - 1
    pal = True
    if (b % 2 == 0):
        while(a != b):
            if (x[a] != x[b]):
                pal = False
            a += 1
            b -= 1
    else:
        while(b > a):
            if (x[a] != x[b]):
                pal = False
            a += 1
            b -= 1
    return pal

def factor(n,k):
    factor = False
    a = 2
    while(a <= n/2):
        if (a * k == n):
            factor = True
            break
        a += 1
    return factor


def dice(wieGrosse, wieviel):
    hand = []
    for i in range(wieviel):
        hand.append(random.randint(1,wieGrosse))
    return hand
                    
def percentDone(n,a, x):
    scale = (n-a) / 100
    times = []
    for i in range(100):
        times.append((i * scale) + a)
    if (x in times):
        print(x/scale)

def primemax(lim):
    pp=2
    ps=[pp]
    pp+=1
    ps.append(pp)
    
    while pp<int(lim):
        pp+=2
        test=True
        for a in ps:
            if pp%a==0:
                test=False
                break
            if test: ps.append(a)
    return max(ps)


def factorial(n):
    a = 1
    for i in range(a,n + 1):
        a *= i
    return a

def fibb(n):
    x = []
    x.append(1)
    x.append(1)
    for i in range (2,n):
        x.append( x[i-1] + x[i - 2] )
    return x[n - 1]

def intlist(n):
    return map(int,list(str(n)))

def digitfact():
    for i in range(3,10000):
        x = []
        y = intlist(i)
        z = []
        for b in y:
            z.append(factorial(b))
        if (sum(z) == i):
            x.append(i)
        return x

def binlist(n):
    x = bin(n)
    x = list(str(x))
    x.remove('0')
    x.remove('b')
    x = map(int, x)
    return x
def binNum(n):
    x = bin(n)
    x = list(str(x))
    x.remove('0')
    x.remove('b')
    
    return ''.join(x)

def ordered_words(n):
    y = list(str(n))
    ordered = True 
    upperLim = len(y) - 2
    a = 0
    while (a <= upperLim):
        if (y[a] > y[a+1]):
            ordered = False
        a +=1
    return ordered

def in_order(data):
    y = data
    ordered = True
    upperLim = len(data) - 2
    a = 0
    while (a <= upperLim):
        if (y[a] > y[a+1]):
            ordered = False
        a+=1
    return ordered

def encrypt(n):
    encryption = []
    n = list(str(n))
    length = len(n)
    index = 0
    currLetter = n[0]
    count = 0
    for i in n:
        if (i == currLetter):
            count += 1
        else:
            encryption.append([currLetter,count])
            count = 1
            currLetter = i
    encryption.append([currLetter,count])
       
    return encryption


def one_off_words(n, wordList):
    result = []
    for i in wordList:
        y = list(str(i))
        x = list(str(n))
        if (len(y) == len(x)):
            a = 0
            offCount = 0
            while(a < len(y)):
                if y[a] != x[a]:
                    offCount+=1
                a+=1
            if (offCount == 1):
                result.append(i)
    return result


def reverse(n):
    x = list(str(n))
    x = x[::-1]
    x = ''.join(x)
    x = int(x)
    return x

def rap(n):
    a = 0
    while(palindrome(n) == False & a < 20):
        n += reverse(n)
        a+=1
    if (palindrome(n) == True):
        return True
    else:
        return False


def decrypt(array, key):
    deciph = []
    for i in array:
        deciph.append(chr(i + key))

    return deciph
def listToStr(n):
    x = ''.join(str(e) for e in n)
    return x

        

def prob63(n):
    power = len(str(n))
    same = False
    for i in range(int(math.sqrt(n))):
        if (i ** power == n):
            same = True
    return same

def gcm(a,b):
    
    gcm = 1
    if (a > b):
        for i in range(2,b):
            if (a % i == 0 & b % i == 0):
                gcm = i
    if (a < b):
        for i in range(2,a):
            if (a % i == 0 & b % i == 0):
                gcm = i
    return gcm


def kramer(a1,a2,b1,b2,c1,c2):
    x = ((c1*b2) - (b1*c2))/float((a1*b2)-(b1*a2))
    y = ((a1*c2) - (c1*a2))/float((a1*b2) - (b1*a2))
    return (x,y)


class Graph:
    def __init__(self, length, width):
        self.l = length
        self.w = width
        self.graph = [['-' for x in range(self.w)] for x in range(self.l)]
    def draw(self):
        for i in range(1,self.l + 1):
            temp = []
            adj = self.l - i
            for j in range(self.w):
                temp.append(self.graph[adj][j])
            print ''.join(temp)
            
    def add(self, f):
        y = []
        for i in range(self.w):
            y.append(ev(f, i))
        top = max(y)
        bot = min(y)
        print y
        scale = int((top - bot)/(float(self.l)))
        for i in range(self.l):
            new = bot + i*scale
            self.graph[i][0] = str(new)
        adj = 0
        for i in range(0,self.l,1):
            adj = bot + (i * scale)
            index = 0
            for j in y:
                if j >= adj and j < adj + scale:
                    self.graph[i][index] = 'X'
                index += 1
    def addData(self,data):
        scaleX = int(len(data)/float(self.w))
        y = []
        for i in range(self.w):
            y.append((data[i*scaleX] +data[i*scaleX+scaleX] + scaleX)/2.0)           
            
        top = max(y)
        bot = min(y)
        print y
        scale = int((top - bot)/(float(self.l)))
        for i in range(self.l):
            new = bot + i*scale
            self.graph[i][0] = str(new)
        adj = 0
        for i in range(0,self.l,1):
            adj = bot + (i * scale)
            index = 0
            for j in y:
                if j >= adj and j < adj + scale:
                    self.graph[i][index] = 'X'
                index += 1
    def resize(self,length,width):
        self.l = length
        self.w = width
        self.graph = [['-' for x in range(self.w)] for x in range(self.l)]
        
        
    def clear(self):
        self.graph = [['-' for x in range(self.w)] for x in range(self.l)]
    


def bubbleSort(data):
    top = len(data)
    bot = 1
    while (in_order(data) == False):
        for i in range(bot,top):
            if data[i] < data[i-1]:
                temp = data[i]
                data[i] = data[i-1]
                data[i-1] = temp

    return data


def catCount():
    cats = []
    for i in range(100):
        cats.append(False)
    for i in range(1,101):
        for j in range(1,101):
            ind = j - 1
            if (j % i == 0):
                if (cats[ind] == False):
                    cats[ind] = True
                else:
                    cats[ind] = False

    pos = 0
    for i in cats:
        if i == True:
            print pos
        pos +=1


def pandig(n):
    n = list(str(n))
    n = map(int,n)
    top = len(n)
    pan = True
    for i in range(top):
        if ((i+1) not in n):
            pan = False
    return pan





